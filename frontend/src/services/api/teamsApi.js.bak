import axios from 'axios';
import { API_URL } from '@/config';

const teamsApi = {
    async getAll(filters = {}) {
        try {
            // Nettoyer les filtres vides
            const cleanFilters = Object.entries(filters).reduce((acc, [key, value]) => {
                if (value !== null && value !== undefined && value !== '') {
                    acc[key] = value;
                }
                return acc;
            }, {});

            const response = await axios.get(`${API_URL}/teams`, {
                params: cleanFilters,
                paramsSerializer: {
                    indexes: null // Pour éviter les indices dans les tableaux
                }
            });
            return response;
        } catch (error) {
            console.error('Erreur lors de la récupération des équipes:', error);
            throw error;
        }
    },

    async getById(id) {
        try {
            const response = await axios.get(`${API_URL}/teams/${id}`);
            return response.data;
        } catch (error) {
            console.error(`Erreur lors de la récupération de l'équipe ${id}:`, error);
            throw error;
        }
    },

    async create(teamData) {
        try {
            // Vérifier et formater les données pour la création de compte utilisateur
            const dataToSend = {...teamData };

            // S'assurer que les champs sont correctement formatés
            if (dataToSend.memberCount) {
                dataToSend.memberCount = Number(dataToSend.memberCount);
            }

            // Si createAccount est true, mais pas de mot de passe spécifié,
            // laisser le backend générer un mot de passe aléatoire
            if (dataToSend.createAccount === true && (!dataToSend.password || dataToSend.password.trim() === '')) {
                console.log('Aucun mot de passe fourni, le backend en générera un automatiquement');
                // Supprimer le champ password vide pour que le backend utilise son générateur
                delete dataToSend.password;
            }

            // Laisser le backend gérer equipmentType à partir de equipmentTypes
            // Nous n'avons plus besoin de définir explicitement equipmentType

            const response = await axios.post(`${API_URL}/teams`, dataToSend);
            return response.data;
        } catch (error) {
            console.error('Erreur lors de la création de l\'équipe:', error);
            throw error;
        }
    },

    async update(id, teamData) {
        try {
            const response = await axios.put(`${API_URL}/teams/${id}`, teamData);
            return response.data;
        } catch (error) {
            console.error(`Erreur lors de la mise à jour de l'équipe ${id}:`, error);
            throw error;
        }
    },

    async delete(id) {
        try {
            await axios.delete(`${API_URL}/teams/${id}`);
            return true;
        } catch (error) {
            console.error(`Erreur lors de la suppression de l'équipe ${id}:`, error);
            throw error;
        }
    },

    async getStatistics() {
        try {
            const response = await axios.get(`${API_URL}/teams/statistics`);
            return response.data;
        } catch (error) {
            console.error('Erreur lors de la récupération des statistiques des équipes:', error);
            throw error;
        }
    }
};

export default teamsApi;